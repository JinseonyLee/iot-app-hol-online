
type Sensor @aws_iam @aws_cognito_user_pools {
  id: ID!
  sensorType: String!
  value: Float!
  isWarning: Boolean!
  timestamp: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Subscription {
  onCreateSensor(sensorType: String!): Sensor @aws_subscribe(mutations: ["createSensor"])
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelSensorConnection @aws_iam @aws_cognito_user_pools {
  items: [Sensor]!
  nextToken: String
}

input ModelSensorFilterInput {
  id: ModelIDInput
  sensorType: ModelStringInput
  value: ModelFloatInput
  isWarning: ModelBooleanInput
  timestamp: ModelIntInput
  and: [ModelSensorFilterInput]
  or: [ModelSensorFilterInput]
  not: ModelSensorFilterInput
}

type Query {
  getSensor(sensorType: String!, timestamp: AWSTimestamp!): Sensor @aws_iam @aws_cognito_user_pools
  listSensors(sensorType: String, timestamp: ModelIntKeyConditionInput, filter: ModelSensorFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelSensorConnection @aws_iam @aws_cognito_user_pools
}

input ModelSensorConditionInput {
  value: ModelFloatInput
  isWarning: ModelBooleanInput
  and: [ModelSensorConditionInput]
  or: [ModelSensorConditionInput]
  not: ModelSensorConditionInput
}

input CreateSensorInput {
  id: ID
  sensorType: String!
  value: Float!
  isWarning: Boolean!
  timestamp: AWSTimestamp!
}

input UpdateSensorInput {
  id: ID
  sensorType: String!
  value: Float
  isWarning: Boolean
  timestamp: AWSTimestamp!
}

input DeleteSensorInput {
  sensorType: String!
  timestamp: AWSTimestamp!
}

type Mutation {
  createSensor(input: CreateSensorInput!, condition: ModelSensorConditionInput): Sensor @aws_iam @aws_cognito_user_pools
  updateSensor(input: UpdateSensorInput!, condition: ModelSensorConditionInput): Sensor @aws_iam @aws_cognito_user_pools
  deleteSensor(input: DeleteSensorInput!, condition: ModelSensorConditionInput): Sensor @aws_iam @aws_cognito_user_pools
}

input ModelIntKeyConditionInput {
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

